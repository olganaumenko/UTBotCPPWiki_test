/*
 * This file is automatically generated by UnitTestBot. For further information see https://www.utbot.org
 */

#include "main_dot_c_test.h"

#include "gtest/gtest.h"

namespace UTBot {


#pragma region regression
TEST(regression, main_test_1)
{
    char _argv[2][2] = {{'c', 'c'}, {'-', 'A'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_6_0 = 0; it_6_0 < 2; it_6_0 ++) {
        argv[it_6_0] = _argv[it_6_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(0, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'-', 'A'}};
    for (int it_7_0 = 0; it_7_0 < 2; it_7_0 ++) {
        for (int it_7_1 = 0; it_7_1 < 2; it_7_1 ++) {
            EXPECT_EQ(expected_argv[it_7_0][it_7_1], _argv[it_7_0][it_7_1]);
        }
    }
}

TEST(regression, main_test_2)
{
    char _argv[2][2] = {{'c', 'c'}, {'c', 'c'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_8_0 = 0; it_8_0 < 2; it_8_0 ++) {
        argv[it_8_0] = _argv[it_8_0];
    }
    argv[2] = NULL;
    int actual = main(0, argv);
    EXPECT_EQ(1, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'c', 'c'}};
    for (int it_9_0 = 0; it_9_0 < 2; it_9_0 ++) {
        for (int it_9_1 = 0; it_9_1 < 2; it_9_1 ++) {
            EXPECT_EQ(expected_argv[it_9_0][it_9_1], _argv[it_9_0][it_9_1]);
        }
    }
}

TEST(regression, main_test_3)
{
    char _argv[2][2] = {{'c', 'c'}, {'-', 'c'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_10_0 = 0; it_10_0 < 2; it_10_0 ++) {
        argv[it_10_0] = _argv[it_10_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(0, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'-', 'c'}};
    for (int it_11_0 = 0; it_11_0 < 2; it_11_0 ++) {
        for (int it_11_1 = 0; it_11_1 < 2; it_11_1 ++) {
            EXPECT_EQ(expected_argv[it_11_0][it_11_1], _argv[it_11_0][it_11_1]);
        }
    }
}

TEST(regression, main_test_4)
{
    char _argv[2][2] = {{'c', 'c'}, {' ', '@'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_12_0 = 0; it_12_0 < 2; it_12_0 ++) {
        argv[it_12_0] = _argv[it_12_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(0, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {' ', '@'}};
    for (int it_13_0 = 0; it_13_0 < 2; it_13_0 ++) {
        for (int it_13_1 = 0; it_13_1 < 2; it_13_1 ++) {
            EXPECT_EQ(expected_argv[it_13_0][it_13_1], _argv[it_13_0][it_13_1]);
        }
    }
}

TEST(regression, main_test_5)
{
    char _argv[2][2] = {{'c', 'c'}, {' ', '\0'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_14_0 = 0; it_14_0 < 2; it_14_0 ++) {
        argv[it_14_0] = _argv[it_14_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(0, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {' ', '\0'}};
    for (int it_15_0 = 0; it_15_0 < 2; it_15_0 ++) {
        for (int it_15_1 = 0; it_15_1 < 2; it_15_1 ++) {
            EXPECT_EQ(expected_argv[it_15_0][it_15_1], _argv[it_15_0][it_15_1]);
        }
    }
}

TEST(regression, main_test_6)
{
    char _argv[2][2] = {{'c', 'c'}, {'1', '\0'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_16_0 = 0; it_16_0 < 2; it_16_0 ++) {
        argv[it_16_0] = _argv[it_16_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(1, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'1', '\0'}};
    for (int it_17_0 = 0; it_17_0 < 2; it_17_0 ++) {
        for (int it_17_1 = 0; it_17_1 < 2; it_17_1 ++) {
            EXPECT_EQ(expected_argv[it_17_0][it_17_1], _argv[it_17_0][it_17_1]);
        }
    }
}

TEST(regression, main_test_7)
{
    char _argv[2][2] = {{'c', 'c'}, {'-', '{'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_18_0 = 0; it_18_0 < 2; it_18_0 ++) {
        argv[it_18_0] = _argv[it_18_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(0, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'-', '{'}};
    for (int it_19_0 = 0; it_19_0 < 2; it_19_0 ++) {
        for (int it_19_1 = 0; it_19_1 < 2; it_19_1 ++) {
            EXPECT_EQ(expected_argv[it_19_0][it_19_1], _argv[it_19_0][it_19_1]);
        }
    }
}

TEST(regression, main_test_8)
{
    char _argv[2][2] = {{'c', 'c'}, {'1', ':'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_20_0 = 0; it_20_0 < 2; it_20_0 ++) {
        argv[it_20_0] = _argv[it_20_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(1, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'1', ':'}};
    for (int it_21_0 = 0; it_21_0 < 2; it_21_0 ++) {
        for (int it_21_1 = 0; it_21_1 < 2; it_21_1 ++) {
            EXPECT_EQ(expected_argv[it_21_0][it_21_1], _argv[it_21_0][it_21_1]);
        }
    }
}

#pragma endregion
#pragma region error
TEST(error, main_test_9)
{
    char _argv[2][2] = {{'c', 'c'}, {'-', '0'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_22_0 = 0; it_22_0 < 2; it_22_0 ++) {
        argv[it_22_0] = _argv[it_22_0];
    }
    argv[2] = NULL;
    main(2, argv);

    FAIL() << "Unreachable point or the function was supposed to fail, but "
        "actually completed successfully. See the SARIF report for details.";
}

TEST(error, main_test_10)
{
    char _argv[2][2] = {{'c', 'c'}, {' ', '-'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_23_0 = 0; it_23_0 < 2; it_23_0 ++) {
        argv[it_23_0] = _argv[it_23_0];
    }
    argv[2] = NULL;
    main(2, argv);

    FAIL() << "Unreachable point or the function was supposed to fail, but "
        "actually completed successfully. See the SARIF report for details.";
}

TEST(error, main_test_11)
{
    char _argv[2][2] = {{'c', 'c'}, {' ', '+'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_24_0 = 0; it_24_0 < 2; it_24_0 ++) {
        argv[it_24_0] = _argv[it_24_0];
    }
    argv[2] = NULL;
    main(2, argv);

    FAIL() << "Unreachable point or the function was supposed to fail, but "
        "actually completed successfully. See the SARIF report for details.";
}

TEST(error, main_test_12)
{
    char _argv[2][2] = {{'c', 'c'}, {' ', '\t'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_25_0 = 0; it_25_0 < 2; it_25_0 ++) {
        argv[it_25_0] = _argv[it_25_0];
    }
    argv[2] = NULL;
    main(2, argv);

    FAIL() << "Unreachable point or the function was supposed to fail, but "
        "actually completed successfully. See the SARIF report for details.";
}

#pragma endregion
}
